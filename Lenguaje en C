# Lenguaje de Programación en C

*Autor: Siro Gascón Ogasawara*

---

## Historia del Lenguaje

C fue creado allá por los años 70 en los Bell Labs por **Dennis Ritchie**. La idea original era programar el sistema operativo **Unix** y otros sistemas cercanos al hardware. Con el tiempo se estandarizó: primero se conoció como *K&R C*, luego salió el *ANSI C* en 1989 y después se fueron publicando actualizaciones como C99, C11 y C18.  
**Visión a futuro:** Aunque ya tiene mucha cancha, C sigue siendo esencial en áreas donde el control y el rendimiento son clave, como en sistemas embebidos y software de sistemas.

---

## Campo de Aplicación Principal

C es ideal para tareas donde necesitas trabajar muy cerca del hardware y aprovechar al máximo el rendimiento.  
**Ejemplos reales:**
- **Sistemas Operativos:** Muchos sistemas, como Unix y Linux, tienen gran parte de su código escrito en C.
- **Sistemas Embebidos:** Se usa en microcontroladores, routers y dispositivos de automoción para maximizar eficiencia.
- **Herramientas de Sistema:** Compiladores como **GCC** y muchas utilidades de sistema se han desarrollado en C.
- **Estudios Académicos:** Es un lenguaje clásico en la enseñanza de fundamentos de programación.

---

## Tipado, Paradigmas y Ejecución

- **Tipado:**  
  C es **estáticamente tipado**, lo que significa que debes declarar el tipo de cada variable desde el principio. Esto ayuda a detectar errores antes de correr el programa, aunque a veces puede parecer un poco estricto.

- **Paradigmas:**  
  Se le considera un lenguaje **procedimental** e **imperativo**. No tiene soporte nativo para la programación orientada a objetos, pero puedes organizar tu código de forma modular y clara.

- **Ejecución:**  
  Es un lenguaje **compilado**. Escribes tu código, lo compilas a código máquina y luego se ejecuta directamente en la computadora, lo que lo hace muy rápido.

---

## Curiosidades

- **Influencia Masiva:**  
  Aunque C es viejo, su huella está en muchos otros lenguajes modernos como C++, Objective-C, e incluso elementos de Rust o Go.

- **Control Total:**  
  Gracias a los punteros y la gestión manual de memoria, tienes un control casi absoluto sobre lo que hace tu programa, lo que es genial (¡y a veces un dolor de cabeza!).

- **Legado Unix:**  
  Uno de los logros más impresionantes fue reescribir Unix en C, permitiendo que se portara a diferentes sistemas y se convirtiera en el referente de los sistemas operativos.

---

## IDEs y Frameworks

### IDEs

Aunque no necesitas un entorno específico para programar en C, hay varios que facilitan la vida:
- **Visual Studio Code:** Con las extensiones adecuadas, es un editor ligero y versátil.
- **CLion (JetBrains):** Un IDE potente con herramientas avanzadas para depuración y refactorización.
- **Eclipse CDT:** La versión de Eclipse enfocada en C/C++, ideal para proyectos grandes.
- **Code::Blocks:** Un IDE gratuito y de código abierto, muy usado en el ámbito educativo.

### Frameworks y Librerías

En C no hay frameworks tan "completos" como en otros lenguajes, pero sí tienes librerías muy útiles:
- **GLib:** Esencial en el entorno GNU/Linux y en aplicaciones del ecosistema GNOME.
- **GTK+:** Para crear interfaces gráficas en aplicaciones de escritorio.
- **POSIX:** Un conjunto de estándares que garantiza la compatibilidad entre diferentes sistemas operativos.

---

## Empresa o Institución Detrás de las Herramientas

El lenguaje C nació en **Bell Labs** y su estandarización ha sido gestionada por organismos como **ANSI** e **ISO**.  
- **Compiladores destacados:**
  - **GCC (GNU Compiler Collection):** Mantenido por la Free Software Foundation.
  - **Clang/LLVM:** Un proyecto de código abierto respaldado por varias comunidades y empresas importantes.

---

## Licencias de Uso

- **Lenguaje C:**  
  No tiene una licencia propietaria ya que es un estándar abierto definido por ANSI e ISO.  
- **Herramientas:**  
  Compiladores populares como **GCC** se distribuyen bajo la **Licencia Pública General de GNU (GPL)**, lo que los hace libres y de código abierto.

---

## Características Destacables

- **Eficiencia y Velocidad:**  
  Permite crear programas de alto rendimiento, perfectos para aplicaciones que requieren un uso intensivo del hardware.
- **Control Directo:**  
  Su manejo de punteros y memoria te da un control total, algo muy valorado en sistemas embebidos y de bajo nivel.
- **Portabilidad:**  
  El estándar de C permite que el código se compile en diferentes plataformas con pocas modificaciones.
- **Simplicidad y Esencia:**  
  Su sintaxis minimalista y directa lo convierte en una excelente base para aprender los fundamentos de la programación.

---

## Enlaces Externos a la Documentación Oficial de C

1. **ISO/IEC 9899:2018 (C18) - Estándar Oficial de C**
   - [ISO/IEC 9899:2018 (C18)](https://www.iso.org/standard/74528.html)
   - *Nota:* Este es el estándar oficial de C. Su acceso completo generalmente requiere compra.

2. **Grupo de Trabajo WG14 (C Standard)**
   - [Open-std.org - WG14](http://www.open-std.org/jtc1/sc22/wg14/)
   - Aquí encontrarás borradores, documentos y discusiones relacionadas con el estándar del lenguaje C.

3. **Documentación de GCC para C**
   - [GCC Online Documentation](https://gcc.gnu.org/onlinedocs/)
   - Esta es la documentación oficial del compilador GCC, muy usado para programar en C.

4. **Documentación de Clang/LLVM**
   - [Clang Users Manual](https://clang.llvm.org/docs/UsersManual.html)
   - Guía oficial del compilador Clang, otra opción popular para compilar código en C.
